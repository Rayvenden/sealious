var Promise = require("bluebird");
/*
function UserRepresentation(database_entry){
	this.database_entry = database_entry;
	if(!database_entry.body){
		console.log("database_entry missing:", database_entry.body);
	}
	console.log("DATABASE_ENTRY: ", database_entry);
}

UserRepresentation.prototype = new function(){
	var data = this.database_entry.body
	data.username = database_entry.username;
	data.userdata_id = database_entry.userdata_id;
}
*/

var UserManager = new function(){
var that = this;

	this.create_user = function(username, password, dispatcher){
		return dispatcher.users_user_exists(username, dispatcher)
			.then(function(result){	
				if (!result){
					return dispatcher.resources_create("user_data", {})
						.then(function(user_data_resource){
							console.log("user-manager", user_data_resource);
							var body = {
								username: username, 
								password: password, 
								userdata_id: user_data_resource.id
							};	
							return dispatcher.database_query("users", "insert", body);
						})
				}else{
					console.log("==========rzucam Error============");
					return new Error("409.1");
				}
			})
	}

	this.user_exists = function(username, dispatcher){
		return new Promise(function(resolve, reject){
			dispatcher.database_query("users", "find", {username: username})
			.then(function(result){
				console.log(result);
				resolve(result.length===1);
			});			
		})
	}



	this.password_match = function(username, password, dispatcher){

		username = username.toString();
		password = password.toString();
		return new Promise(function(resolve, reject){
			console.log("username: ", username);
			console.log("password: ", password);
			dispatcher.database_query("users", "find", {username: username, password: password})
			.then(function(result){
				resolve(result.length===1);
			})			
		})
	}

	this.get_all_users = function(dispatcher){
		return dispatcher.database_query("users", "find")
	}

	this.get_user_data = function(username, dispatcher){
		return new Promise(function(resolve, reject){
			dispatcher.database_query("users", "find", {username: username})
				.then(function(documents){
					if (documents.length===1){
						userdata_id = documents[0].userdata_id;
						console.log(userdata_id);
						return dispatcher.resources_get_by_id(userdata_id);
					}else{
						console.log("Jestem błędem.........");
						reject(new Error("404"))
					}
				})
				.then(function(userdata){
					console.log("userdata: ", userdata);
					userdata.username = username;
					resolve(userdata);
				})			
		})
	}

	this.update_user_data = function(username, new_user_data, dispatcher){
		return new Promise (function(resolve, reject){		
			dispatcher.users_user_exists(username, dispatcher)
			.then(function(exists){
				if(exists){
					dispatcher.database_query("users", "update", {username: username}, {"$set":new_user_data})
					.then(function(documents){
						resolve();
					})
				}else{
					reject(new Error("404"))
				}
			})
		})
	}

	this.delete_user = function(username, dispatcher){
 		return new Promise(function(resolve, reject){ 			
 			dispatcher.database_query("users", "delete", {username: username})
 			.then(function(data){
				resolve(data);
			}).catch(function(e){
	 			reject(e);
	 		});			
 		});
 	}



}

module.exports = UserManager;