var Promise = require("bluebird");
/*
function UserRepresentation(database_entry){
	this.database_entry = database_entry;
	if(!database_entry.body){
		console.log("database_entry missing:", database_entry.body);
	}
	console.log("DATABASE_ENTRY: ", database_entry);
}

UserRepresentation.prototype = new function(){
	var data = this.database_entry.body
	data.username = database_entry.username;
	data.userdata_id = database_entry.userdata_id;
}
*/

var UserManager = new function(){
var that = this;

	this.create_user = function(username, password, dispatcher){
		var user_data;
		return dispatcher.users_user_exists(username, dispatcher)
			.then(function(result){	
				if (!result){
					return dispatcher.resources_create("user_data", {})
						.then(function(user_data_resource){
							user_data = user_data_resource;
							return dispatcher.metadata_increment_variable("first_free_user_id", dispatcher);
						})
						.then(function(first_free_user_id){
							//console.log("user-manager", user_data_resource);
							var body = {
								user_id : first_free_user_id,
								username: username, 
								password: password, 
								userdata_id: user_data.id
							};	
							return dispatcher.database_query("users", "insert", body);
						})
				}else{
					console.log("==========rzucam Error============");
					return new Error("409.1");
				}
			})
	}

	this.user_exists = function(username, dispatcher){
		return new Promise(function(resolve, reject){
			dispatcher.database_query("users", "find", {username: username})
			.then(function(result){
				//console.log(result);
				resolve(result.length===1);
			});			
		})
	}



	this.password_match = function(username, password, dispatcher){
		username = username.toString();
		password = password.toString();
		return new Promise(function(resolve, reject){
			//console.log("username: ", username);
			//console.log("password: ", password);
			dispatcher.database_query("users", "find", {username: username, password: password})
			.then(function(result){
				resolve(result.length===1);
			})			
		})
	}

	this.get_all_users = function(dispatcher){
		return dispatcher.database_query("users", "find")
	}

	this.get_user_data = function(user_id, dispatcher){
		user_id = parseInt(user_id);
		console.log("user-manager.js looking for id:", user_id);
		var user_data_document = null;
		return new Promise(function(resolve, reject){
			dispatcher.database_query("users", "find", {user_id: user_id})
				.then(function(documents){
					if (documents.length===1){
						console.log("user-manager.js documents[0]", documents[0]);
						user_data_document = documents[0];
						userdata_id = documents[0].userdata_id;
						//console.log(userdata_id);
						return dispatcher.resources_get_by_id(userdata_id);
					}else{
						reject(new Error("404"))
					}
				})
				.then(function(userdata){
					userdata.username = user_data_document.username;
					userdata.user_id = user_data_document.user_id;
					resolve(userdata);
				})			
		})
	}

	this.get_userdata_id = function(user_id, dispatcher){
		user_id = parseInt(user_id);
		return new Promise(function(resolve, reject){
			dispatcher.database_query("users", "find", {user_id: user_id})
			.then(function(documents){
				//console.log("user-manager.js", )
				resolve(parseInt(documents[0].userdata_id));
			})
			
		})
	}

	var that = this;

	this.update_user_data = function(user_id, new_user_data, dispatcher){
		return new Promise (function(resolve, reject){		

			//$todo: tutaj wczytujemy z kolekcji users informacje o tym, jakie ID ma zasób go reprezentujący i zmienić wartości w zasobie o tym id

			dispatcher.users_user_id_exists(user_id, dispatcher)
			.then(function(exists){
				if(exists){
					that.get_userdata_id(user_id, dispatcher)
					.then(function(userdata_id){
						dispatcher.resources_update(userdata_id, new_user_data)
						.then(function(documents){
							resolve();
						})						
					})
				}else{
					reject(new Error("404"))
				}
			})
		})
	}

	this.user_id_exists = function(user_id, dispatcher){
		user_id = parseInt(user_id);
		return new Promise(function(resolve, reject){
			dispatcher.database_query("users", "find", {user_id: user_id})
			.then(function(documents){
				resolve(!(documents.length===0));
			})
		})
	}

	this.delete_user = function(username, dispatcher){
 		return new Promise(function(resolve, reject){ 			
 			dispatcher.database_query("users", "delete", {username: username})
 			.then(function(data){
				resolve(data);
			}).catch(function(e){
	 			reject(e);
	 		});			
 		});
 	}



}

module.exports = UserManager;