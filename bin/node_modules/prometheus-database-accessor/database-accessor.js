var Promise = require("promise");
var request = require("request");
var queryString = require("query-string");

var LayerManager = require("prometheus-layer-manager");
var config = require("prometheus-config");

var db_rest_api_client = new function(){

	this.init = function(){
		//server_configuration = LayerManager.getDBLayerLocation();
	}

	function generateUrl(){
		var remote_settings = config.db_layer_config;
		return "http://" + remote_settings.host + ":" + remote_settings.port;
	}

	this.query = function(collection_name, mode, query, options, output_options){
		output_options = output_options || {};
		return new Promise(function(resolve, reject){
			if(mode=="find"){
				var url = generateUrl() + "/api/rest/v1/" + collection_name + "/";

				var query_string = queryString.stringify({
				  mode: mode,
				  query: JSON.stringify(query),
				  options: JSON.stringify(options),
				  output_options: JSON.stringify(output_options)
				});

				var entire_url = url+"?"+query_string

				console.log("query_string: ", query_string);

				request.get(entire_url, function(err, res, body){
					if(err){
						throw new Error(err);
						reject(err);
					}else{
						console.log("FIND response:", body);
						resolve(JSON.parse(body));
					}
				})
			}	
			
			if(mode=="insert"){
				var url = generateUrl() + "/api/rest/v1/" + collection_name + "/";
				var payload = {
				  mode: "insert",
				  query: query,
				  options: options
				};

				var payload_string = JSON.stringify(payload);	

				console.log("@@@@@about to send payload string:", payload_string);		

				request.post(url, {form:{json_encoded_payload:payload_string}}, function(err, res, body){
					console.log("REQUEST RESPONSE BODY on insert:", body);
					if(err){
						throw new Error(err);
						reject(err);
					}else{
						resolve(JSON.parse(body));
					}
				})
			}	



			if(mode=="update"){
				console.log("!!!!!!!!!!NEEDS TESTING");
				var url = generateUrl() + "/api/rest/v1/" + collection_name + "/";
				var payload = {
				  mode: "update",
				  query: query,
				  options: options
				};

				var payload_string = JSON.stringify(payload);

				console.log("@@@@@about to send payload string:", payload_string);

				request.put(url, {form:{json_encoded_payload:payload_string}}, function(err, res, body){
					console.log("REQUEST RESPONSE BODY on update:", body);
					console.log("error:", err)
					if(err){
						throw new Error(err);
						reject(err);
					}else{
						resolve(JSON.parse(body));
					}
				})
			}
		})
	}
}

var db_lpc_api_client = new function(){

	var server = null;

	this.init = function(){
		server = require("prometheus-database-layer").getServer();
		this.query = server.query;
	}

}


function lpc_api_needed(){
	if(LayerManager.isLocal()){
		return true;
	}else{
		if(LayerManager.getLayer()=="web"){
			return false
		}else{
			return true;
		}
	}
}


function rest_api_needed(){
	if(LayerManager.isLocal()){
		return false;
	}else{
		if(LayerManager.getLayer()=="biz"){
			return true;
		}else{
			return false;
		}
	}
}


if(rest_api_needed()){
	module.exports = db_rest_api_client;	
}else{
	if(lpc_api_needed()){
		db_lpc_api_client.init();
		module.exports = db_lpc_api_client;		
	}
}
