var io = require('socket.io')();
var config = require('prometheus-config');
io.listen(config.biz_layer_config.port);

console.log("###############\n    Socket.io started on port " + config.biz_layer_config.port + "\n###############");

io.on('connection', function(socket) {
        console.log("# A client connected!!");       

        /* 
        socket.on("service_event", function(data){
            var service_name = data.service_name;
            var action_name = data.action_name;
            var payload = data.payload;
            var request_id = data.request_id;
            var service = ChipManager.getService(service_name);
            service.fire_action(action_name, payload, function(data){
                var data_to_send = {};
                data_to_send.request_id = request_id;
                data_to_send.payload = data;
                socket.emit("service_event_response", data_to_send);
                //console.log("response emitted with event service_event_response:", data_to_send);
            });
        });
		*/

        socket.on("request", function(data){
        	var method_name = data.method_name;
        	var arguments = data.arguments;
        	var request_id = data.request_id;
        	DispatcherDistributedBIZ[method_name].apply(DispatcherDistributedBIZ, arguments).then(function(response){
        		socket.emit("response", response);
        	});
        });
        
        //event wylogowania
        socket.on('logout',function(){
                socket.disconnect(); // zamknięcie połączenia
        });
        socket.on('disconnect', function() {
                console.log("User  disconnected"); // event rozłączenia
        });
});

var DispatcherDistributedBIZ = new function(){

	function generateUrl(){
		var remote_settings = config.db_layer_config;
		return "http://" + remote_settings.host + ":" + remote_settings.port;
	}

	this.database_query = function(collection_name, mode, query, options, output_options){
		// tłumaczenie argumentów tego wywołania metody na REST
		output_options = output_options || {};
		return new Promise(function(resolve, reject){
			if(mode=="find"){
				var url = generateUrl() + "/api/rest/v1/" + collection_name + "/";

				var query_string = queryString.stringify({
				  mode: mode,
				  query: JSON.stringify(query),
				  options: JSON.stringify(options),
				  output_options: JSON.stringify(output_options)
				});

				var entire_url = url+"?"+query_string

				request.get(entire_url, function(err, res, body){
					if(err){
						throw new PrometheusError(err, "find_error", "database-accessor");
						reject(err);
					}else{
						resolve(JSON.parse(body));
					}
				})
			}	
			
			if(mode=="insert"){
				var url = generateUrl() + "/api/rest/v1/" + collection_name + "/";
				var payload = {
				  mode: "insert",
				  query: query,
				  options: options
				};

				var payload_string = JSON.stringify(payload);	


				request.post(url, {form:{json_encoded_payload:payload_string}}, function(err, res, body){
					if(err){
						throw new PrometheusError(err, "insert_error", "database-accessor");
						reject(err);
					}else{
						resolve(JSON.parse(body));
					}
				})
			}	

			if(mode=="update"){
				var url = generateUrl() + "/api/rest/v1/" + collection_name + "/";
				var payload = {
				  mode: "update",
				  query: query,
				  options: options
				};

				var payload_string = JSON.stringify(payload);


				request.put(url, {form:{json_encoded_payload:payload_string}}, function(err, res, body){
					if(err){
						throw new PrometheusError(err, "update_error", "database-accessor");
						reject(err);
					}else{
						resolve(JSON.parse(body));
					}
				})
			}
		})
	}

	this.resources_list_by_type = function(type_name, params){
//in local mode		
		return ResourceManager.list_by_type(type_name, params, this)
		// wywołuje metodę w ResourceManager, jako argument podaje samego siebie
		// przekazujemy obiekt (this), aby na nim wywołać metodę "query"
		// this - cały obiekt dispatchera
	}

	this.resources_create = function(type_name, body){
//in local mode		
		return ResourceManager.create_resource(type_name, body, this);
	}

	this.metadata_increment_variable = function(){
//in local mode		
		return MetadataManager.increment_variable.apply(MetadataManager, arguments);
	}




}

module.exports = DispatcherDistributedBIZ;