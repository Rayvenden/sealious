function ResourceTypeField(name, options){
	this.name = name;
	this.type = options.type;
	this.derived = options.derived || false;
}

ResourceTypeField.prototype = new function(){

}

function ResourceType(name, field_declarations){
	this.name = name;
	this.fields = this.parseFieldDeclarations(field_declarations);
}

ResourceType.prototype = new function(){

	this.parseFieldDeclarations = function(field_declarations){
		var ret = [];
		for(var field_name in field_declarations){
			ret[field_name] = new ResourceTypeField(field_name, field_declarations[field_name]);
		}
		return ret;		
	}

	this.validateFieldValues = function(field_values){
		for(var field_name in field_values){
			if(!this.fields[field_name]){
				var err = new Error("===error=== type `" + this.name + "` does not have a field with a name `" + field_name + "`");
				err.code = "unknown_field_name";
				throw err;
			}
			var field_object = this.fields[field_name];
			var is_proper_value = field_object.isProperValue(field_values[field_name]);
			if(!is_proper_value){
				var err = new Error("===error=== invalid value `" + field_values[field_name] + "` for field `" + field_name + "` in `" + this.name + "`");
				err.code = "invalid_field_value";
				throw err;
			}
		}
	}

}

module.exports = ResourceType;