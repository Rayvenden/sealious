/**
 * @module  resource-type-manager
 */

var Set = require("Set");
var PrometheusError = require("prometheus-error");
var ResourceType = require("prometheus-resource").ResourceType;
var FieldTypeManager = require("prometheus-resource").FieldTypeManager;

var ResourceTypeManager = new function(){

	var all_types = new Set();
	var all_types_by_name = [];

	function resource_type_name_correct(name){
		return name.length>3 && name.indexOf(" ")==-1;
	}

	/**
	 * Throws an error if a resource type of given name has not been registered
	 * @param  {string} type_name the name of the resource type to check for existance of
	 */
	this.enforce_correct_type_name = function(type_name){
		type_name = type_name.toString();
		if(!ResourceTypeManager.typeExists(type_name)){
			var error_message = "type `" + type_name + "` does not exist.";
			throw new PrometheusError(error_message, "type_doesnt_exist", "resource-type-manager");
			return;
		}	
	};

	/**
	 * Creates a new resource type
	 * @param  {string} resource_type_name
	 * @param  {object} fields
	 * @return {undefined}
	 */	
	this.create = function(resource_type_name, fields){
		if(!resource_type_name_correct(resource_type_name)){
			var error_message = "Incorrect resource type name: " + resource_type_name.toString();
			//throw new Error("===ReourceManager Error:===\tincorrect resource type name: " + resource_type_name.toString());
			throw new PrometheusError(error_message, "incorrect_resource_type_name", "resource-type-manager");
		}
		var new_resource = new ResourceType(resource_type_name, fields);
		all_types.add(new_resource);
		all_types_by_name[resource_type_name] = new_resource;
	}

	/**
	 * Get a resource type object by name
	 * @param  {string} resource_type_name
	 * @return {ResourceType|null}
	 */
	this.getByName = function(resource_type_name){
		var ret =  all_types_by_name[resource_type_name] || null;
		return ret;
	};

	/**
	 * Whether a resource type by given name has already been registered
	 * @param  {string} resource_type_name
	 * @return {Boolean}
	 */
	this.typeExists = function(resource_type_name){
		return all_types_by_name[resource_type_name]!==undefined;
	};

}

module.exports = ResourceTypeManager;