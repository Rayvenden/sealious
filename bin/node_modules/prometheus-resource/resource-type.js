var Promise = require("bluebird");

var FieldTypeManager = require("prometheus-resource").FieldTypeManager;
var ResourceTypeField = require("prometheus-resource").ResourceTypeField;
var PrometheusError = require("prometheus-error");

/**
 * Represents a Resource type. Contains Fields of specified type.
 * @class
 * @param {string} name Must be a unique string
 * @param {Object} field_declarations
 */
function ResourceType(name, field_declarations){
	this.name = name;
	this.fields = [];
	this.parseFieldDeclarations(field_declarations);
}

ResourceType.prototype = new function(){


	this.parseFieldDeclarations = function(field_declarations){
		var ret = [];
		for(var field_name in field_declarations){
			var new_field =  new ResourceTypeField(field_name, field_declarations[field_name]);
			this.addField(new_field);
		}
		return ret;		
	}

	/**
	 * Adds a field to the ResourceType instance
	 * @param {string} field_object the field to append to ResourceType Description
	 * @alias ResourceType#addField
	 */
	this.addField = function(field_object){
		if(this.fields[field_object.name]!==undefined){
			var error_message = "field `" + field_object.name + "` already exists";
			throw new PrometheusError(error_message, "field_exists", "resource-type");
		}
		this.fields[field_object.name] = field_object;
	}

	/**
	 * Checks if given field_values can be stored in this Resource Type
	 * @alias  ResourceType#validateFieldValues
	 * @param  {object} field_values
	 * @return {Promise} resolved if field values are valid, rejected otherwise
	 */
	this.validateFieldValues = function(field_values){
		console.log("validate:", field_values);
		var that = this;
		return new Promise(function(resolve, reject){
			//check for redundant fields
			for(var given_field_name in field_values){
				if(!(that.fields[given_field_name])){
					var error_message = "Type `" + that.name + "` does not have a field with a name `" + given_field_name + "`";
					var err = new PrometheusError(error_message, "unknown_field_name", "resource-type");
					reject(err);
					return;
				}
			}
			console.log("\t...none");
			//check if all required fields are present
			console.log("check if all required fields are present...");
			for(field_name in that.fields){
				var current_field = that.fields[field_name];
				if(current_field.required && field_values[field_name]===undefined){
					var error_message = "Value for field `" + field_name + "` in `" + that.name + "` is required, but not set";
					var err2 = new PrometheusError(error_message, "missing_field_value", "resource-type");
					reject(err2);
					return;
				}
			}
			console.log("\t...yis");
			//check if all required fields are given proper value
			console.log("check if all field values are correct...");
			var promises = [];
			for(field_name in field_values){
				console.log(field_name);
				current_field = that.fields[field_name];
				var promise = current_field.isProperValue(field_values[field_name]);
				promises.push(promise);
			}
			Promise.settle(promises).then(function(responses){
				for(var i=0; i<responses.length; i++){
					var res = responses[i];
					console.log(res.isFulfilled());
					if(!res.isFulfilled()){
						reject(res.reason());
						return;
					}
				}
				console.log("\t...they are");
				resolve();
			});
		});
	}

	this.encodeFieldValues = function(field_values){
		var promises = [];
		for(var field_name in field_values){
			var current_field_value = field_values[field_name];
			var promise = this.fields[field_name].encodeValue(current_field_value, true);
			promises.push(promise);
		}
		return new Promise(function(resolve, reject){
			Promise.settle(promises).then(
				function(combined_res){
					var ret = {};
					for(i=0; i<combined_res.length; i++){
						var res = combined_res[i];
						if(res.isFulfilled()){
							var value = res.value();
							for(var j in value){
								ret[j] = value[j];
							}							
						}else{
							reject(res.reason());
							return;
						}

					}
					console.log("resolving encodeFieldValues with:", ret);
					resolve(ret);						
				}
			);			
		})
	}

}

module.exports = ResourceType;