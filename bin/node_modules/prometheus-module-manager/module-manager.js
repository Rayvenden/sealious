var path = require("path");
var fs = require("fs");
var Set = require("Set");
var ChipManager = require("prometheus-chip-manager");
var ServiceWrapper = require("prometheus-service").wrapper;
var Module = require("./module.js");


var PrometheusError = require("prometheus-error");


var ModuleManager = new function(){
	var module_info_by_id = [];
	var modules_by_id = {};
	var modules_executed = false;

	function intersection_of_arrays(array1, array2){
		array3 = array1.filter(function(n) {
		    return array2.indexOf(n) != -1;
		});
		return array3;
	}

	function decide_module_execution_order(){
		var all_modules_registred = false;
		var module_ids_in_order = [];
		var registered_chips = new Set();
		var registred_ids = new Set();
		var was_registred_by = [];
		while(!all_modules_registred){
			all_modules_registred = true;
			registred_in_this_iteration = 0;
			for(var current_module_id in module_info_by_id){
				if(registred_ids.has(current_module_id)){
					continue;
				}
				current_module_info = module_info_by_id[current_module_id];
				if(!current_module_info.registred){
					var can_execute = true;
					if(!current_module_info.requires){
						//value not set, no requirements;
					}else{
						for(var j in current_module_info.requires){
							if(!registered_chips.has(current_module_info.requires[j])){
								can_execute = false;
							}
						}
					}
					for (var i=0; i<current_module_info.defines.length; i++){
						var current_chip_id = current_module_info.defines[i];
						if (registered_chips.has(current_chip_id)){
							var error_message = "Chip " + current_chip_id + " has already been registered by module " + was_registred_by[current_chip_id] + ", so module " + current_module_id + " can not be executed.";
							throw new PrometheusError(error_message, "chip_already_eists", "prometheus-module-manager");
						}
					}
					if(can_execute){
						module_ids_in_order.push(current_module_id);
						registred_ids.add(current_module_id);
						registered_chips.addAll(current_module_info.defines);
						for(var chip in current_module_info.defines){
							was_registred_by[current_module_info.defines[chip]] = current_module_id;
						}

						registred_in_this_iteration = 1;
					}else{
						all_modules_registred = false;
					}
				}
			}
			if(registred_in_this_iteration === 0){
				
				//throw new Error("Uresolvable modules dependencies.\n" + where_the_unresolvable_is(module_info_by_id));
				
				var error_message = where_the_unresolvable_is(module_info_by_id);
				/*var PrometheusError = createCustomError('PrometheusError', null, function(message, code, module){
					this.err_message = message;
					this.code = code;
					this.module = module;
				});*/

				throw new PrometheusError(error_message, "unresolved_dependencies", "prometheus-module-manager");
			}
		}
		return module_ids_in_order;
	}
	
	function where_the_unresolvable_is(modules){
	//it takes array of modules and search for unresolvable dependencies
		var message = "";
		var has_unresolved = false;
		var defined_chips = [];

		for (var current_module in modules){
			for (var i in modules[current_module].defines){
				defined_chips.push(modules[current_module].defines[i]);
			}		
		}

		for(var i in modules){
			for(var j in modules){
				if(i!=j && intersection_of_arrays(modules[i].requires, modules[j].defines).length && intersection_of_arrays(modules[j].requires, modules[i].defines).length){
					message += "There are cyclic dependencies between modules: " + i + " and " + j + "\n";
					has_unresolved = true;
				}
			}
		}

		for (var k in modules) {
		    for(var requirement in modules[k].requires) {
		        if (defined_chips.indexOf(modules[k].requires[requirement]) == -1) {
		            has_unresolved = true;
		            message += "Module '" + k + "' requires '"  + modules[k].requires[requirement] + "' which was not found!\n";
		        }
		    }
		}
		if(!has_unresolved){
		    message = "There are no unresolved dependencies";
		}
		return message;
	}

	this.collect_module_settings = function(){
		var modules_dir = path.resolve(module.filename, "../../../prometheus-modules");
		var modules_dir_contents = fs.readdirSync(modules_dir);
		for(var i in modules_dir_contents){
			var current_module_path = path.resolve(modules_dir, modules_dir_contents[i]);
			this.loadPath(current_module_path);
		}
	}

	this.bootstrap = function(){
		this.collect_module_settings();
	}

	this.execute_modules = function(scope){
		var id_order = decide_module_execution_order();
		for(var i in id_order){
			modules_by_id[id_order[i]].execute(scope);
		}
	};

	this.registerModule = function(module){
		module_id = module.id;
		module_info_by_id[module_id] = module.getSettings();
		modules_by_id[module_id] = module;
	}	

	this.loadPath = function(module_path){
		var module_id = path.basename(module_path);
		if(module_info_by_id[module_id]){
			//do nothing. module already loaded;
		}else{
			var new_module = new Module(module_path);
			this.registerModule(new_module);
		}
	};

}

module.exports.ModuleManager = ModuleManager;