var Set = require("Set");
var path = require("path");
var fs = require("fs");
var ChipManager = require("prometheus-chip-manager");
var ResourceTypeManager = require("prometheus-resource").ResourceTypeManager;
var AssociationInterface = require("prometheus-resource").AssociationInterface;

function Module(module_path){
	var settings_path = path.resolve(module_path, "package.json");
	var settings_json_string = fs.readFileSync(settings_path);
	var settings = JSON.parse(settings_json_string);
	var module_id  = settings["prometheus-module-id"];
	this.id = module_id;
	this.path = module_path;
	settings.executed = false; //used as a semaphore in register_modules function
	settings.requires = settings["prometheus-required-chips"] || [];
	settings.defines = settings["prometheus-defined-chips"] || [];
	this.settings = settings;
	var defines = settings["prometheus-defined-chips"];
	if(defines){
		for(var i in defines){
			ChipManager.registerChip(defines[i]);
		}
	}
}

Module.prototype = (function(){

	this.getSettings = function(){
		return this.settings;
	}

	this.channels_executed = false;
	this.services_executed = false;

	this.getAllChipsIDs = function(){
		//returns a combined array of both what the module defines and requires
		var requires = this.getInfo().requires;
		var defines = this.getInfo().defines;
		var ret_set = new Set();
		ret_set.addAll(requires? requires : []);
		ret_set.addAll(defines? defines : []);
		return ret_set.toArray();
	}

	this.getUsedChannelsIDs = function(){
		var chips = this.getAllChipsIDs();
		var res =[];
		for(var i in chips){
			var chip_name = chips[i];
			if(chip_name.indexOf("channel.")==0){
				res.push(chip_name);
			}
		}	
		return res;
	}

	this.getAllChips = function(){
		var ids = this.getAllChipsIDs();
		var res = [];
		for(var i in ids){
			var id = ids[i];
			var type = id.split(".")[0];
			switch(type){
				case "channel":
					res[id] = ChipManager.getChannel(id.split(".")[1]);
					break;
				case "service":
					/*
					if(this.services_executed && LayerManager.isLocal()){
						res[id] = ChipManager.getService(id.split(".")[1]);						
					}else{
					*/
						res[id] = new ServiceWrapper(id.split(".")[1])
					/*
					}
					 */
					break;
			}
		}
		return res;
	}

	this.getChannels = function(){
		var chips = this.getAllChipsIDs();
		var ret = [];
		for(var i in chips){
			if(chips[i].indexOf("channel.")!=-1){
				var channel = ChipManager.getChannel(chips[i].slice("channel.".length));
				ret[chips[i]] = channel;
			}
		}
		return ret;
	}

	this.getInfo = function(){
		return this.getSettings();
	}

	this.register_channels = function(execute){
		if(!this.channels_registred){
			this.channels_registred = true;
			if(this.body.register_channels){
				var channel_ids = this.body.register_channels();
				var dependencies = [];
				for(var i in channel_ids){
					var current_channel_id = channel_ids[i];
					var channel_info = this.body.channel_info(current_channel_id);
					if(execute){
						var channel_body = this.body.channel_object(current_channel_id, dependencies);						
					}
					ChipManager.registerChannel(current_channel_id, channel_info, channel_body)
				}
			}		
		}
		if(execute){
			this.channels_executed=true;
		}
	}

	this.getDefindedChipsIDsByType = function(type) {
		var defines_service = [];
		var chips = this.settings.defines;
		for (var service in chips) {
			if (chips[service].indexOf(type) != -1) {
				var dot = chips[service].indexOf(".");
				defines_service.push(chips[service].substr(dot+1, chips[service].length));
			}
		}
		return defines_service;
	}

	this.register_resource_types = function(){
		var resource_type_names = this.getDefindedChipsIDsByType("resource-type");
		for(var i in resource_type_names){
			var resource_type_name = resource_type_names[i];
			console.log("registering ", resource_type_name);
			var resource_type_fields = this.body.construct_resource_type(resource_type_name);
			ResourceTypeManager.create(resource_type_name, resource_type_fields);
		}
		if(this.body.construct_associations){
			this.body.construct_associations(AssociationInterface);
		}
	}

	this.register_services = function(execute){
		if(!this.services_registred){
			this.services_registred = true;
			var service_ids = this.getDefindedChipsIDsByType("service");
			if(service_ids){
				var dependencies = this.getChannels();
				for(var i in service_ids){
					var current_service_id = service_ids[i];
					var service_info = this.body.service_info(current_service_id);
					if(execute){
						var service_body = this.body.construct_service(current_service_id, dependencies);						
					}
					ChipManager.registerService(current_service_id, service_info, service_body)
				}
			}
		}
		if(execute){
			this.services_executed=true;
		}
	}

	this.setup_channels = function(){
		var channel_ids = this.getUsedChannelsIDs();
		var dependencies = this.getAllChips();
		for(var i in channel_ids){
			var channel_id = channel_ids[i];
			if(this.body.channel_setup){
				this.body.channel_setup(channel_id, dependencies)
			}
		}		
	}

	this.post_execute_setup = function(){
		if(this.channels_executed){
			this.setup_channels();
		}
	}

	this.execute = function(scope){
		this.body = require(this.path);
		var execute_services = false;
		var execute_channels = false;
		for(var i in scope){
			switch(scope[i]){
				case "channels":
					execute_channels = true;
					break;
				case "services":
					execute_services = true;
					break;
				default:
					break;
			}
		}
		this.register_resource_types();
		this.register_services(execute_services);
		this.register_channels(execute_channels);
		this.post_execute_setup();
	};

	return this;
})();


module.exports = Module;