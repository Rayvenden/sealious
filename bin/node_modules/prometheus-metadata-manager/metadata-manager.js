var DatabaseAccess = require("prometheus-database-accessor");

var MetadataManager = new function(){

	var that = this;

	this.getValue = function(key, callback){
		DatabaseAccess.query("meta", "find", { key: key }, {}).then(function(response){
			if(response.length==0){
				callback(undefined);
			}else{
				callback(response[0].value);
			}
		});
	}
	
	this.hasKey = function(key, callback){
		DatabaseAccess.query("meta", "find", { key: key }, {}).then(function(response){
			if(response.length==0){
				callback(false);
			}else{
				callback(true);
			}
		});
	}

	this.setValue = function(key, value, callback){
		that.hasKey(key, function(has){
			function actual_set(){
				DatabaseAccess.query("meta", "update", { key: key }, {key:key, value: value}).then(function(response){
					if(response.length==0){
						callback(false);
					}else{
						callback(true);
					}
				});					
			}
			if(!has){
				DatabaseAccess.query("meta", "insert", {key: key, value: value}, {}).then(function(data){
					actual_set();
				})
			}else{
				actual_set();
			}
		})
	}

	this.increment = function(key, callback){
		that.hasKey(key, function(has){
			if(!has){
				throw new Error("value not present in database, it needs to be initialized");
			}else{
				that.getValue(key, function(data){
					if(isNaN(data)){
						var new_id=0;
					}else{
						var new_id = data+1;						
					}
					that.setValue(key, new_id, function(dataL){
						callback(new_id);
					})
				})				
			}
		})
	}
}

module.exports = MetadataManager;