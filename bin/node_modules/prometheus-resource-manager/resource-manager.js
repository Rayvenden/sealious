var Promise = require("bluebird");
var ResourceRepresentation = require("prometheus-resource-representation");

var ChipManager = require("prometheus-chip-manager");

/**
 * Manages resources in the database
 * @class 
 */
 var ResourceManager = new function(){

 	this.create_resource = function(type_name, body, dispatcher){

 		console.log("new resource:", body);
 		if(!ChipManager.chip_is_registred("resource_type." + type_name)){
 			throw new Error("Unknown resource type: " + type_name);
 		}

 		var resource_type_object = ChipManager.get_resource_type(type_name);

 		var encoded_body = null;

 		return new Promise(function(resolve, reject){
 			resource_type_object.validate_field_values(body)
 				.then(
 					function(){
	 					return resource_type_object.encode_field_values(body); 						
 					}
 				).then(
	 				function(response){
	 					encoded_body = response;
	 					console.log("encoded_body:", encoded_body);
	 					return dispatcher.metadata_increment_variable("first_free_id", dispatcher)
	 				}
 				).then(
 					function(newID) {
 						console.log("about to query database with mode insert");
						dispatcher.database_query("resources", "insert", {prometheus_id: newID, type: type_name, body: encoded_body}, {}).then(function(data){
							var database_entry = data[0];
							var resource = new ResourceRepresentation(database_entry);
							resolve(resource.getData());
						});
					}
				).catch(function(e){
 					reject(e);
 				});			
 			})

 	}

 	this.delete_resource = function(type_name, body, dispatcher){

 		console.log("delete resource:", body);
 		if(!ChipManager.chip_is_registred("resource_type." + type_name)){
 			throw new Error("Unknown resource type: " + type_name);
 		}

 		return new Promise(function(resolve, reject){ 			
 			dispatcher.database_query("resources", "delete", {prometheus_id: body.id, type: type_name}, {})
 			.then(function(data){
				//console.log("resource-manager: ", body);
				//console.log("resource-manager: ", database_entry);
				resolve();
			}).catch(function(e){
	 			reject(e);
	 		});			
 	})

 	}

	/**
	 * Calls callback function with `true` if a resource with given ID exists in the database. Otherwise, 
	 * @param  {Number}   prometheus_id 	the id to test for
	 * @param  {string}   [type] 			type of the resource. If provided, callback value will be true only if a resource with a given id AND of a provided type exists
	 * @param  {ResourceManager~idExistsCallback} callback
	 */
	 this.idExists = function(prometheus_id, type_name, callback){
	 	if(arguments.length==2){
	 		callback = arguments[1];
	 		type_name = undefined;
	 	}
	 	var query = {
	 		prometheus_id: parseInt(prometheus_id)
	 	}
	 	if(type_name){
	 		ResourceTypeManager.enforce_correct_type_name(type_name);
	 		query.type = type_name;
	 	}
	 	DatabaseInterface.query("resources", "find", query, {}).then(function(response){
	 		console.log("idExists database callback:", response);
	 		if(response.length===0){
	 			callback(false);
	 		}else{
	 			callback(true);
	 		}
	 	})
	 }

	/**
	 * Callback for idExists
	 * @callback ResourceManager~idExistsCallback
	 * @param {Boolean} exists - true if a resource with given id exists
	 */

	 this.getResourceByID = function(resource_id, callback){
	 	var promise = DatabaseInterface.query("resources", "find", { prometheus_id: resource_id }, {})
	 	if(callback){
	 		promise.then(function(response){
	 			var resource = new Resource(response);
	 			callback(resource);
	 		})
	 	}else{
	 		return promise;
	 	}
	 }

	 this.list_by_type = function(type_name, params, dispatcher) {
	 	return new Promise(function(resolve, reject){
	 		if(!ChipManager.chip_is_registred("resource_type."+type_name)){
	 			reject(new Error("resource type "+type_name+" does not exist"));
	 		}else{
			 	dispatcher.database_query("resources", "find", { type: type_name }, {}, params).then(function(response) {
			 		var ret = response.map(function(database_entry){
			 			return new ResourceRepresentation(database_entry).getData();
			 		})
			 		console.log("about to call callback");
			 		console.log(ret);
			 		resolve(ret);
			 	})
	 		}
	 	})
	 }
	}

	module.exports = ResourceManager;