var Promise = require("promise");
var config = require("prometheus-config");
var LayerManager = require("prometheus-layer-manager");
var core = require("prometheus-core");

var biz_rpc_client = new function(){
	var io_client = require('socket.io-client')
	var ip=require('ip');

	var server_config = null;

	var socket = null;

	var max_request_id = 0;

	var callback_queue = {};

	function getRequestId(){
		max_request_id+=1;
		return max_request_id;
	}

	function addCallbackToQueue(id, callback){
		callback_queue[id] = callback;
	}

	function resolveToCallback(event_response_data){
		var callback = callback_queue[event_response_data.request_id];
		callback(event_response_data.payload);
		delete callback_queue[event_response_data.request_id];
	}

	function generateBizUrl(){
		var cfg = config.biz_layer_config;
		return "http://" + cfg.host + ":" + cfg.port;
	}

	this.init = function(){
		var biz_url = generateBizUrl();
		socket = io_client.connect(biz_url, {reconnect: true});
		socket.on("service_event_response", function(data){
			resolveToCallback(data);
		})
	}

	this.emit_service_event = function(service_name, event_name, payload, callback){
		//return new Promise(function(resolve, reject){
			var data = {};
			data.service_name = service_name;
			data.event_name = event_name;
			data.payload = payload;
			var request_id = getRequestId();
			data.request_id = request_id;
			socket.emit("service_event", data);
			addCallbackToQueue(request_id, function(new_data){
				console.log("biz callback data:", new_data);
				callback(new_data);
			})
			
		//})
	}
}

var biz_lpc_client = new function(){

	this.init=function(){
		//core = require("prometheus-business-layer");
	}

	this.emit_service_event = function(service_name, event_name, payload, callback){
		service = core.getService(service_name);
		service.emit(event_name, payload, callback);
	}
}

function rpc_needed(){
	if(LayerManager.isLocal()){
		return false;
	}else{
		if(LayerManager.getLayer()=="web"){
			return true;
		}else{
			return false;
		}
	}
}


if(rpc_needed()){
	biz_rpc_client.init();
	module.exports = biz_rpc_client;
}else{
	biz_lpc_client.init();
	module.exports = biz_lpc_client;
}